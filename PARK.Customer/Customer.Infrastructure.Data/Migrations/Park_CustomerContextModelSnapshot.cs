// <auto-generated />
using System;
using Infrastructure.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(Park_CustomerContext))]
    partial class Park_CustomerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasColumnName("ACTIVE");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ADDRESS_TYPE_ID");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CITY");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODE");

                    b.Property<Guid?>("ContactTypeId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("CONTACT_TYPE_ID");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("COUNTRY");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("Dept")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DEPT");

                    b.Property<DateTime>("FInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("FINSERT");

                    b.Property<DateTime?>("FUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUPDATE");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("FLOOR");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LAT");

                    b.Property<string>("Lng")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LNG");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("POSTALCODE");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("STREETNAME");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("STREETNUMBER");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("UserNameUpdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAMEUPDATE");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("PARK_CUSTOMER_ADDRESS", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompanyContactPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODE");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<DateTime>("FInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("FINSERT");

                    b.Property<DateTime?>("FUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUPDATE");

                    b.Property<Guid?>("PersonId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("PERSON_ID");

                    b.Property<string>("Preferred")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PREFERRED");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("UserNameUpdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAMEUPDATE");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PersonId");

                    b.ToTable("PARK_COMPANY_PERSON_CONTACT", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ContactType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime>("FInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("FINSERT");

                    b.Property<DateTime?>("FUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUPDATE");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("UserNameUpdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAMEUPDATE");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.ToTable("PARK_CONTACT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODE");

                    b.Property<Guid?>("ComunityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("COMUNITY_ID");

                    b.Property<int>("DocumentNumber")
                        .HasColumnType("int")
                        .HasColumnName("DOCUMENT_NUMBER");

                    b.Property<Guid?>("DocumentTypeId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("DOCUMENT_TYPE_ID");

                    b.Property<DateTime>("FInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("FINSERT");

                    b.Property<DateTime?>("FUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUPDATE");

                    b.Property<string>("InvoiceType")
                        .HasColumnType("longtext")
                        .HasColumnName("INVOICE_TYPE");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("UserNameUpdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAMEUPDATE");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("PARK_CUSTOMER", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODE");

                    b.Property<int?>("CustomerType")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_TYPE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime>("FInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("FINSERT");

                    b.Property<DateTime?>("FUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUPDATE");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("UserNameUpdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAMEUPDATE");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.ToTable("PARK_DOCUMENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime>("FInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("FINSERT");

                    b.Property<DateTime?>("FUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUPDATE");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("UserNameUpdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAMEUPDATE");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.ToTable("PARK_GENDER", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Mail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODE");

                    b.Property<Guid?>("ContactTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CONTACT_TYPE_ID");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("EMAIL");

                    b.Property<DateTime>("FInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("FINSERT");

                    b.Property<DateTime?>("FUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUPDATE");

                    b.Property<int?>("Preferred")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("PREFERRED");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("UserNameUpdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAMEUPDATE");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("PARK_CUSTOMER_MAIL", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODE");

                    b.Property<Guid?>("ContactTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CONTACT_TYPE_ID");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<DateTime>("FInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("FINSERT");

                    b.Property<DateTime?>("FUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUPDATE");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("UserNameUpdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAMEUPDATE");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("PARK_CUSTOMER_PHONE", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValue("N")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODE");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime>("FInsert")
                        .HasColumnType("datetime")
                        .HasColumnName("FINSERT");

                    b.Property<DateTime?>("FUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUPDATE");

                    b.Property<string>("Image")
                        .HasColumnType("longtext")
                        .HasColumnName("IMAGE");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("UserNameUpdate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USERNAMEUPDATE");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("PARK_CUSTOMERPHOTO", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasBaseType("Domain.Entities.Customer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("COMPANY_NAME");

                    b.Property<string>("CurrentName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CURRENT_NAME");

                    b.ToTable("PARK_COMPANY", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.HasBaseType("Domain.Entities.Customer");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("BIRTHDAY");

                    b.Property<Guid?>("Gender_id")
                        .HasColumnType("char(36)")
                        .HasColumnName("GENDER_ID");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LASTNAME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NAME");

                    b.HasIndex("Gender_id");

                    b.ToTable("PARK_PERSON", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.ContactType", "ContactTypes")
                        .WithMany("CustomerAddres")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactTypes");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.CompanyContactPerson", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerPersonContacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("Customers")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Domain.Entities.Mail", b =>
                {
                    b.HasOne("Domain.Entities.ContactType", "ContactTypes")
                        .WithMany("CustomerMails")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerMails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactTypes");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Phone", b =>
                {
                    b.HasOne("Domain.Entities.ContactType", "ContactTypes")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactTypes");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Photo", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerPhotos")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.Customer", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Company", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.HasOne("Domain.Entities.Gender", "Gender")
                        .WithMany("Persons")
                        .HasForeignKey("Gender_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Customer", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Domain.Entities.ContactType", b =>
                {
                    b.Navigation("CustomerAddres");

                    b.Navigation("CustomerMails");

                    b.Navigation("CustomerPhones");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerAddress");

                    b.Navigation("CustomerMails");

                    b.Navigation("CustomerPersonContacts");

                    b.Navigation("CustomerPhones");

                    b.Navigation("CustomerPhotos");
                });

            modelBuilder.Entity("Domain.Entities.DocumentType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
